#!/usr/bin/env bash

# pmctl
# PageMill Control Script
# Author: Michael Stealey <michael.j.stealey@gmail.com>

### Local Config ###
CONFIG_DIRECTORY='pagemill/deploy'
CONFIG_FILE='pagemill-config.yaml'
LOCAL_ENV_FILE='local-env.sh'
HOME_DIR=${PWD}

### Pre-flight Variables ###
DEV_SERVER='runuser -p -u root -g root /usr/bin/env bash run-server'
PROD_SERVER='/usr/bin/env bash run-server'

# Read pagemill-config.yaml into environment
cd $CONFIG_DIRECTORY
sed -e "s/:[^:\/\/]/=/g;s/$//g;s/ *=/=/g" $CONFIG_FILE > $LOCAL_ENV_FILE
sed -i 's/#.*$//' $LOCAL_ENV_FILE
sed -i '/^\s*$/d' $LOCAL_ENV_FILE
while read line; do export $line; done < <(cat $LOCAL_ENV_FILE)
cd $HOME_DIR

display_usage() {
    echo "*** USAGE ***"
    echo " - TODO:"
}

stop_pagemill() {
    echo "*** STOP ***"
    docker-compose stop
}

start_pagemill() {
    echo "*** START ***"
    docker-compose start
}

remove_pagemill() {
    echo "*** REMOVE ***"
    # if web is running remove the static directory
    if [[ -n "$(docker-compose ps | grep web | grep Up)" ]]; then
        echo "*** INFO: Remove /static directory ***"
        docker exec pagemill-web rm -rf static
    fi
    stop_pagemill
    docker-compose rm -f
}

restart_pagemill() {
    echo "*** RESTART ***"
    stop_pagemill
    preflight_pagemill
    start_pagemill
}

preflight_pagemill() {
    echo "*** PREFLIGHT ***";
    echo $PAGEMILL_PATH
    echo "*** INFO: Using Django runserver ***"
    # use development server to run pagemill
    sed -i 's!\<'"${PROD_SERVER}"'\>!'"${DEV_SERVER}"'!g' ${PAGEMILL_PATH}/init-web
    # enable SSH server for debugging purposes
    sed -i 's!'"# REMOVED SSH COMPONENT"'!'"/usr/sbin/sshd"'!g' ${PAGEMILL_PATH}/init-web
    cp -rf ${PAGEMILL_PATH}/deploy/run-dev-server ${PAGEMILL_PATH}/run-server
}

build_pagemill() {
    echo "*** BUILD ***"
    docker-compose build
}

run_pagemill() {
    echo "*** RUN ***"
    preflight_pagemill
    docker-compose up -d
}

backup_pagemill() {
    echo "*** BACKUP DATABASE, MEDIA AND SETTINGS FILES ***"
    docker exec pagemill-web python manage.py dumpdata > "pagemill-fixtures-`date +"%m-%d-%y"`.json"
    if [ ! -d "${PAGEMILL_PATH}/media_files" ]; then
        mkdir ${PAGEMILL_PATH}/media_files;
    fi
    docker exec pagemill-web rsync -avh --dry-run /home/docker/pagemill/static/media \
        /home/docker/pagemill/media_files
    docker exec pagemill-web rsync -avh /home/docker/pagemill/static/media \
        /home/docker/pagemill/media_files
    cd ${PAGEMILL_PATH}
    tar -czvf "media.pagemill-`date +"%m-%d-%y"`.tar.gz" media_files
    docker exec pagemill-web rm -rf /home/docker/pagemill/media_files
    cd -
    # Move files to backup directory in users home
    if [ ! -d "/home/${USER}/pagemill-backup" ]; then
        mkdir /home/${USER}/pagemill-backup;
    fi
    # backup local_settings.py
    cp ${PAGEMILL_PATH}/pagemill/local_settings.py \
        /home/${USER}/pagemill-backup/local_settings.py
    # backup settings.py
    cp ${PAGEMILL_PATH}/pagemill/settings.py \
        /home/${USER}/pagemill-backup/settings.py
    # backup pagemill-config.yaml
    cp ${PAGEMILL_PATH}/deploy/pagemill-config.yaml \
        /home/${USER}/pagemill-backup/pagemill-config.yaml
    # backup docker-compose.yml
    cp ${HOME_DIR}/docker-compose.yml \
        /home/${USER}/pagemill-backup/docker-compose.yml
    # backup database
    cp ${PAGEMILL_PATH}/pagemill-fixtures-`date +"%m-%d-%y"`.json \
        /home/${USER}/pagemill-backup/pagemill-fixtures-`date +"%m-%d-%y"`.json
    # backup media files
    cp ${PAGEMILL_PATH}/media.pagemill-`date +"%m-%d-%y"`.tar.gz \
        /home/${USER}/pagemill-backup/media.pagemill-`date +"%m-%d-%y"`.tar.gz
}

restore_pagemill() {
    echo "*** RESTORE DATABASE, MEDIA AND SETTINGS FILES ***"
    # restore local_settings.py
    cp /home/${USER}/pagemill-backup/local_settings.py \
        ${PAGEMILL_PATH}/pagemill/local_settings.py
    # restore settings.py
    cp /home/${USER}/pagemill-backup/settings.py \
        ${PAGEMILL_PATH}/pagemill/settings.py
    # restore pagemill-config.yaml
    cp /home/${USER}/pagemill-backup/pagemill-config.yaml \
        ${PAGEMILL_PATH}/deploy/pagemill-config.yaml
    # restore docker-compose.yml
    cp /home/${USER}/pagemill-backup/docker-compose.yml \
        ${PAGEMILL_PATH}/docker-compose.yml
    # restore database
    cp /home/${USER}/pagemill-backup/${PAGEMILL_DATABASE} \
        ${PAGEMILL_PATH}/${PAGEMILL_DATABASE}
    # restore fixtures
    cp /home/${USER}/pagemill-backup/pagemill-fixtures-`date +"%m-%d-%y"`.json \
        ${PAGEMILL_PATH}/pagemill-fixtures.json
    # restore media files
    cp /home/${USER}/pagemill-backup/${PAGEMILL_MEDIA_FILES} \
        ${PAGEMILL_PATH}/${PAGEMILL_MEDIA_FILES}
}

loaddb_pagemill() {
    echo "*** LOAD FIXTURES ***"
    docker exec pagemill-web python manage.py loaddata pagemill-fixtures.json
    docker exec pagemill-web python manage.py collectstatic --no-input
    docker exec pagemill-web python manage.py migrate
}

loadmedia_pagemill() {
    echo "*** LOAD MEDIA FILES ***"
    cd ${PAGEMILL_PATH}
    tar -xzvf ${PAGEMILL_MEDIA_FILES}
    if [ ! -d "${PAGEMILL_PATH}/static" ]; then
        mkdir ${PAGEMILL_PATH}/static;
    fi
    cp -r media_files/media static/
    cd -
}

deploy_pagemill_nodb() {
    echo "*** DEPLOY - NO DB ***"
    build_pagemill
    run_pagemill
    echo "*** INFO: Allowing containers to start up ***"
    for pc in $(seq 10 -1 1); do
        echo -ne "$pc ...\033[0K\r"
        sleep 1
    done
    docker exec pagemill-web python manage.py collectstatic --no-input
    docker exec pagemill-web python manage.py migrate
}

deploy_dev_pagemill() {
    echo "*** DEPLOY DEVELOPMENT - WITH DB ***"
    build_pagemill
    preflight_pagemill
    run_pagemill
    echo "*** INFO: Allowing containers to start up ***"
    for pc in $(seq 10 -1 1); do
        echo -ne "$pc ...\033[0K\r"
        sleep 1
    done
    loaddb_pagemill
    loadmedia_pagemill
}

deploy_prod_pagemill() {
    echo "*** DEPLOY PRODUCTION - WITH DB ***"
    build_pagemill
    restore_pagemill
    preflight_pagemill
    run_pagemill
    echo "*** INFO: Allowing containers to start up ***"
    for pc in $(seq 10 -1 1); do
        echo -ne "$pc ...\033[0K\r"
        sleep 1
    done
    loaddb_pagemill
    loadmedia_pagemill
}

case "$1" in
    build) build_pagemill $1
        ;;
    backup) backup_pagemill $1
        ;;
    restore) restore_pagemill $1
        ;;
    deploy_dev) deploy_dev_pagemill $1
        ;;
    deploy_prod) deploy_prod_pagemill $1
        ;;
    deploy_nodb) deploy_pagemill_nodb $1
        ;;
    loaddb) loaddb_pagemill $1
        ;;
    loadmedia) loadmedia_pagemill $1
        ;;
    maint_off) maint_off_pagemill $1
        ;;
    maint_on) maint_on_pagemill $1
        ;;
    rebuild) rebuild_pagemill $1 $2
        ;;
    restart) restart_pagemill $1
        ;;
    run) run_pagemill $1
        ;;
    start) start_pagemill $1
        ;;
    stop) stop_pagemill $1
        ;;
    remove) remove_pagemill $1
        ;;
    preflight) preflight_pagemill $1
        ;;
    *) display_usage
        ;;
esac

exit 0;